<?php
namespace modules\blog\controllers;

use modules\blog\models\DashboardModel;
use modules\blog\models\ChargeModel;
use modules\blog\models\GraphGeneratorModel;
use modules\blog\views\ChargeView;

/**
 * Classe ChargeController
 *
 * Cette classe g√®re les op√©rations li√©es √† l'analyse de charge avec s√©lection libre de p√©riode.
 *
 * VERSION REFACTORIS√âE : S√©lection libre date d√©but ‚Üí date fin
 * Suppression du syst√®me de semaines pr√©d√©finies
 */
class ChargeController {
    private $dashboardModel;
    private $chargeModel;
    private $graphGenerator;
    private $chargeView;

    /**
     * Constructeur du ChargeController
     */
    public function __construct() {
        $this->dashboardModel = new DashboardModel();
        $this->chargeModel = new ChargeModel();
        $this->graphGenerator = new GraphGeneratorModel();
        $this->chargeView = new ChargeView();
    }

    /**
     * üÜï G√®re les actions li√©es √† l'analyse de charge avec s√©lection libre de p√©riode
     *
     * @param string $action Action √† ex√©cuter
     */
    public function handleRequest($action = '') {
        echo "<script>console.log('=== D√âBUT handleRequest AVEC S√âLECTION LIBRE DE P√âRIODE ===');</script>";
        echo "<script>console.log('Action re√ßue: " . addslashes($action) . "');</script>";
        echo "<script>console.log('URL compl√®te: " . addslashes($_SERVER['REQUEST_URI'] ?? 'N/A') . "');</script>";
        echo "<script>console.log('Param√®tres GET: " . addslashes(json_encode($_GET)) . "');</script>";

        // R√©cup√©rer l'ID utilisateur de la session
        $userId = $_SESSION['user_id'] ?? 'Utilisateur';

        // R√©cup√©rer les informations de l'utilisateur
        $userInfo = $this->dashboardModel->getUserInfo($userId);

        try {
            // V√©rifier si des donn√©es sont disponibles
            if (!$this->dashboardModel->hasData()) {
                echo "<script>console.log('‚ùå ERREUR: Aucune donn√©e disponible');</script>";
                echo $this->chargeView->showErrorMessage("Aucune donn√©e disponible. Veuillez d'abord convertir et importer des fichiers depuis le tableau de bord.");
                return;
            }

            echo "<script>console.log('‚úì Donn√©es disponibles, d√©but du processus...');</script>";

            // √âTAPE 1 : R√©cup√©rer la plage de dates disponibles
            echo "<script>console.log('üìÖ √âTAPE 1: R√©cup√©ration de la plage de dates disponibles...');</script>";
            $dateRange = $this->chargeModel->getAvailableDateRange();

            if (!$dateRange['has_data']) {
                echo "<script>console.log('‚ùå ERREUR: Aucune plage de dates disponible');</script>";
                echo $this->chargeView->showErrorMessage("Aucune donn√©e disponible pour l'analyse de charge.");
                return;
            }

            echo "<script>console.log('‚úì Plage disponible: " . addslashes($dateRange['date_min']) . " ‚Üí " . addslashes($dateRange['date_max']) . "');</script>";

            // √âTAPE 2 : R√©cup√©rer et valider les dates de la p√©riode s√©lectionn√©e
            echo "<script>console.log('üîç √âTAPE 2: Traitement de la p√©riode s√©lectionn√©e...');</script>";
            $periodSelection = $this->handlePeriodSelection($dateRange);

            // √âTAPE 3 : Analyser toutes les donn√©es pour le r√©capitulatif g√©n√©ral (comme avant)
            echo "<script>console.log('üìä √âTAPE 3: Analyse compl√®te pour r√©capitulatif...');</script>";
            $resultatAnalyseComplete = $this->chargeModel->analyserChargeParPeriode();
            $resultatsFormatt√©s = $this->chargeModel->formaterResultats($resultatAnalyseComplete);

            // √âTAPE 4 : Obtenir un r√©sum√© des donn√©es pour l'affichage
            $dataSummary = $this->dashboardModel->getDataSummary();
            $fileName = "Donn√©es de la base (" . $dataSummary['total_entries'] . " entr√©es)";

            echo "<script>console.log('üñºÔ∏è √âTAPE 4: Affichage de la page avec s√©lecteur libre');</script>";

            // Afficher les r√©sultats avec le nouveau syst√®me
            echo $this->chargeView->showChargeAnalysis(
                $userInfo,
                $fileName,
                $resultatsFormatt√©s,
                $periodSelection['periodData'] ?? [],
                $periodSelection['chartPaths'] ?? [],
                $dateRange
            );

        } catch (\Exception $e) {
            echo "<script>console.log('üí• EXCEPTION: " . addslashes($e->getMessage()) . "');</script>";
            echo $this->chargeView->showErrorMessage("Une erreur est survenue : " . $e->getMessage());
        }

        echo "<script>console.log('=== FIN handleRequest AVEC S√âLECTION LIBRE DE P√âRIODE ===');</script>";
    }

    /**
     * üÜï G√®re la s√©lection et validation de la p√©riode libre
     *
     * @param array $dateRange Plage de dates disponibles
     * @return array Donn√©es de la p√©riode et graphiques g√©n√©r√©s
     */
    private function handlePeriodSelection($dateRange) {
        echo "<script>console.log('=== TRAITEMENT S√âLECTION P√âRIODE LIBRE ===');</script>";

        // R√©cup√©rer les dates depuis les param√®tres GET
        $dateDebut = trim($_GET['date_debut'] ?? '');
        $dateFin = trim($_GET['date_fin'] ?? '');

        echo "<script>console.log('Dates re√ßues - D√©but: " . addslashes($dateDebut) . ", Fin: " . addslashes($dateFin) . "');</script>";

        // Si aucune date fournie, ne pas traiter (affichage initial sans graphiques)
        if (empty($dateDebut) || empty($dateFin)) {
            echo "<script>console.log('‚ÑπÔ∏è Aucune p√©riode s√©lectionn√©e, affichage initial');</script>";
            return [
                'periodData' => [],
                'chartPaths' => []
            ];
        }

        // Validation des dates
        $validationResult = $this->validatePeriodDates($dateDebut, $dateFin, $dateRange);
        if (!$validationResult['success']) {
            echo "<script>console.log('‚ùå Validation p√©riode √©chou√©e: " . addslashes($validationResult['message']) . "');</script>";
            throw new \Exception($validationResult['message']);
        }

        echo "<script>console.log('‚úÖ Validation p√©riode r√©ussie');</script>";

        // √âTAPE A : R√©cup√©rer les donn√©es pour la p√©riode s√©lectionn√©e
        echo "<script>console.log('üîç R√âCUP√âRATION DONN√âES P√âRIODE: " . addslashes($dateDebut) . " ‚Üí " . addslashes($dateFin) . "');</script>";
        $periodData = $this->chargeModel->getDailyDataForPeriod($dateDebut, $dateFin);

        if (isset($periodData['error'])) {
            echo "<script>console.log('‚ùå ERREUR r√©cup√©ration donn√©es p√©riode: " . addslashes($periodData['error']) . "');</script>";
            throw new \Exception($periodData['error']);
        }

        echo "<script>console.log('‚úì Donn√©es p√©riode r√©cup√©r√©es: " . $periodData['donneesCount'] . " entr√©es sur " . $periodData['nombreJoursOuvres'] . " jours ouvr√©s');</script>";

        // √âTAPE B : G√©n√©ration des graphiques pour la p√©riode s√©lectionn√©e
        echo "<script>console.log('üé® G√âN√âRATION DES GRAPHIQUES POUR LA P√âRIODE...');</script>";
        $chartPaths = $this->graphGenerator->generatePeriodCharts($periodData['graphiquesData']);
        echo "<script>console.log('‚úì Graphiques g√©n√©r√©s: " . count($chartPaths) . " fichiers');</script>";

        return [
            'periodData' => $periodData,
            'chartPaths' => $chartPaths
        ];
    }

    /**
     * üÜï Valide les dates de la p√©riode s√©lectionn√©e
     *
     * @param string $dateDebut Date de d√©but
     * @param string $dateFin Date de fin
     * @param array $dateRange Plage de dates disponibles
     * @return array R√©sultat de la validation
     */
    private function validatePeriodDates($dateDebut, $dateFin, $dateRange) {
        echo "<script>console.log('=== VALIDATION DES DATES DE P√âRIODE ===');</script>";

        // Validation format de date
        try {
            $debutObj = new \DateTime($dateDebut);
            $finObj = new \DateTime($dateFin);
        } catch (\Exception $e) {
            return [
                'success' => false,
                'message' => "Format de date invalide. Veuillez utiliser le format YYYY-MM-DD."
            ];
        }

        // Validation : d√©but doit √™tre ant√©rieur ou √©gal √† la fin
        if ($debutObj > $finObj) {
            return [
                'success' => false,
                'message' => "La date de d√©but doit √™tre ant√©rieure ou √©gale √† la date de fin."
            ];
        }

        // Validation : les dates doivent √™tre dans la plage disponible
        if ($dateRange['has_data']) {
            $rangeMinObj = new \DateTime($dateRange['date_min']);
            $rangeMaxObj = new \DateTime($dateRange['date_max']);

            if ($debutObj < $rangeMinObj || $finObj > $rangeMaxObj) {
                return [
                    'success' => false,
                    'message' => "La p√©riode s√©lectionn√©e doit √™tre comprise entre " .
                        $dateRange['date_min_formatted'] . " et " . $dateRange['date_max_formatted'] .
                        " (plage des donn√©es disponibles)."
                ];
            }
        }

        // Avertissement pour les tr√®s longues p√©riodes (> 180 jours)
        $diffTime = $finObj->getTimestamp() - $debutObj->getTimestamp();
        $diffDays = ceil($diffTime / (24 * 60 * 60)) + 1;

        if ($diffDays > 180) {
            echo "<script>console.log('‚ö†Ô∏è AVERTISSEMENT: P√©riode tr√®s longue (" . $diffDays . " jours)');</script>";
            // On pourrait ajouter une limitation ici si n√©cessaire
        }

        echo "<script>console.log('‚úÖ Dates valid√©es: " . addslashes($dateDebut) . " ‚Üí " . addslashes($dateFin) . " (" . $diffDays . " jours)');</script>";

        return [
            'success' => true,
            'message' => "Dates valides",
            'nombre_jours' => $diffDays
        ];
    }

    /**
     * üÜï Valide une date individuelle
     *
     * @param string $dateStr Date √† valider
     * @param string $fieldName Nom du champ pour le message d'erreur
     * @return array R√©sultat de la validation
     */
    private function validateSingleDate($dateStr, $fieldName) {
        if (empty($dateStr)) {
            return [
                'success' => false,
                'message' => "Le champ '$fieldName' est obligatoire."
            ];
        }

        try {
            $dateObj = new \DateTime($dateStr);
            // V√©rifier que la cha√Æne correspond exactement au format attendu
            if ($dateObj->format('Y-m-d') !== $dateStr) {
                throw new \Exception("Format incorrect");
            }
        } catch (\Exception $e) {
            return [
                'success' => false,
                'message' => "Format de date invalide pour '$fieldName'. Utilisez le format YYYY-MM-DD."
            ];
        }

        return [
            'success' => true,
            'message' => "Date valide",
            'date_object' => $dateObj
        ];
    }

    /**
     * üÜï G√®re les cas d'erreur de donn√©es manquantes
     *
     * @param string $userErrorMessage Message d'erreur pour l'utilisateur
     * @param string $debugMessage Message de debug pour la console
     */
    private function handleDataError($userErrorMessage, $debugMessage = '') {
        if (!empty($debugMessage)) {
            echo "<script>console.log('‚ùå " . addslashes($debugMessage) . "');</script>";
        }
        echo $this->chargeView->showErrorMessage($userErrorMessage);
    }

    /**
     * üÜï Log une √©tape du processus
     *
     * @param string $step Nom de l'√©tape
     * @param string $message Message de l'√©tape
     * @param bool $success Succ√®s ou non (pour l'ic√¥ne)
     */
    private function logStep($step, $message, $success = true) {
        $icon = $success ? '‚úì' : '‚ùå';
        echo "<script>console.log('" . $icon . " [" . addslashes($step) . "] " . addslashes($message) . "');</script>";
    }

    /**
     * üÜï Obtient des informations de debug sur la p√©riode
     *
     * @param string $dateDebut Date de d√©but
     * @param string $dateFin Date de fin
     * @return array Informations calcul√©es
     */
    private function calculatePeriodInfo($dateDebut, $dateFin) {
        try {
            $debutObj = new \DateTime($dateDebut);
            $finObj = new \DateTime($dateFin);

            $diffTime = $finObj->getTimestamp() - $debutObj->getTimestamp();
            $totalDays = ceil($diffTime / (24 * 60 * 60)) + 1;

            // Estimation approximative des jours ouvr√©s (5/7 des jours)
            $estimatedWorkingDays = floor($totalDays * 5 / 7);

            return [
                'total_days' => $totalDays,
                'estimated_working_days' => $estimatedWorkingDays,
                'period_length' => $totalDays <= 7 ? 'courte' : ($totalDays <= 30 ? 'moyenne' : 'longue')
            ];
        } catch (\Exception $e) {
            return [
                'total_days' => 0,
                'estimated_working_days' => 0,
                'period_length' => 'invalide'
            ];
        }
    }
}