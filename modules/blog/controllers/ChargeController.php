<?php
namespace modules\blog\controllers;

use modules\blog\models\DashboardModel;
use modules\blog\models\ChargeModel;
use modules\blog\models\GraphGeneratorModel;
use modules\blog\views\ChargeView;

/**
 * Classe ChargeController
 *
 * Cette classe g√®re les op√©rations li√©es √† l'analyse de charge avec s√©lecteur de semaine.
 */
class ChargeController {
    private $dashboardModel;
    private $chargeModel;
    private $graphGenerator;
    private $chargeView;

    /**
     * Constructeur du ChargeController
     */
    public function __construct() {
        $this->dashboardModel = new DashboardModel();
        $this->chargeModel = new ChargeModel();
        $this->graphGenerator = new GraphGeneratorModel();
        $this->chargeView = new ChargeView();
    }

    /**
     * G√®re les actions li√©es √† l'analyse de charge avec s√©lection de semaine
     *
     * @param string $action Action √† ex√©cuter
     */
    public function handleRequest($action = '') {
        echo "<script>console.log('=== D√âBUT handleRequest AVEC S√âLECTION SEMAINE ===');</script>";
        echo "<script>console.log('Action re√ßue: " . addslashes($action) . "');</script>";
        echo "<script>console.log('URL compl√®te: " . addslashes($_SERVER['REQUEST_URI'] ?? 'N/A') . "');</script>";
        echo "<script>console.log('Param√®tres GET: " . addslashes(json_encode($_GET)) . "');</script>";

        // R√©cup√©rer l'ID utilisateur de la session
        $userId = $_SESSION['user_id'] ?? 'Utilisateur';

        // R√©cup√©rer les informations de l'utilisateur
        $userInfo = $this->dashboardModel->getUserInfo($userId);

        try {
            // V√©rifier si des donn√©es sont disponibles
            if (!$this->dashboardModel->hasData()) {
                echo "<script>console.log('‚ùå ERREUR: Aucune donn√©e disponible');</script>";
                echo $this->chargeView->showErrorMessage("Aucune donn√©e disponible. Veuillez d'abord convertir et importer des fichiers depuis le tableau de bord.");
                return;
            }

            echo "<script>console.log('‚úì Donn√©es disponibles, d√©but du processus...');</script>";

            // √âTAPE 1 : Analyser les donn√©es pour obtenir toutes les semaines disponibles
            echo "<script>console.log('üìä √âTAPE 1: R√©cup√©ration des semaines disponibles...');</script>";
            $availableWeeks = $this->chargeModel->getAvailableWeeks();

            if (empty($availableWeeks)) {
                echo "<script>console.log('‚ùå ERREUR: Aucune semaine disponible');</script>";
                echo $this->chargeView->showErrorMessage("Aucune semaine disponible dans les donn√©es.");
                return;
            }

            echo "<script>console.log('‚úì Semaines disponibles: " . count($availableWeeks) . "');</script>";

            // √âTAPE 2 : D√©terminer la semaine s√©lectionn√©e
            $selectedWeek = $this->determineSelectedWeek($availableWeeks);
            echo "<script>console.log('üìÖ Semaine s√©lectionn√©e: " . addslashes($selectedWeek) . "');</script>";

            // √âTAPE 3 : R√©cup√©rer les donn√©es pour la semaine s√©lectionn√©e
            echo "<script>console.log('üîç √âTAPE 3: R√©cup√©ration donn√©es pour la semaine...');</script>";
            $weeklyData = $this->chargeModel->getDailyDataForWeek($selectedWeek);

            if (isset($weeklyData['error'])) {
                echo "<script>console.log('‚ùå ERREUR r√©cup√©ration donn√©es semaine: " . addslashes($weeklyData['error']) . "');</script>";
                echo $this->chargeView->showErrorMessage($weeklyData['error']);
                return;
            }

            echo "<script>console.log('‚úì Donn√©es semaine r√©cup√©r√©es');</script>";

            // √âTAPE 4 : G√©n√©ration des graphiques pour la semaine s√©lectionn√©e
            echo "<script>console.log('üé® √âTAPE 4: G√©n√©ration des graphiques pour la semaine...');</script>";
            $chartPaths = $this->graphGenerator->generateWeeklyCharts($weeklyData['graphiquesData']);
            echo "<script>console.log('‚úì Graphiques g√©n√©r√©s: " . count($chartPaths) . " fichiers');</script>";

            // √âTAPE 5 : Pr√©parer les r√©sultats pour l'affichage
            echo "<script>console.log('üîß √âTAPE 5: Pr√©paration pour affichage...');</script>";

            // Analyser toutes les donn√©es pour le r√©capitulatif g√©n√©ral
            $resultatAnalyseComplete = $this->chargeModel->analyserChargeParPeriode();
            $resultatsFormatt√©s = $this->chargeModel->formaterResultats($resultatAnalyseComplete);

            // Obtenir un r√©sum√© des donn√©es pour l'affichage
            $dataSummary = $this->dashboardModel->getDataSummary();
            $fileName = "Donn√©es de la base (" . $dataSummary['total_entries'] . " entr√©es)";

            echo "<script>console.log('üñºÔ∏è √âTAPE 6: Affichage de la page avec s√©lecteur de semaine');</script>";

            // Afficher les r√©sultats avec le s√©lecteur de semaine
            echo $this->chargeView->showChargeAnalysis(
                $userInfo,
                $fileName,
                $resultatsFormatt√©s,
                $availableWeeks,
                $selectedWeek,
                $chartPaths
            );

        } catch (\Exception $e) {
            echo "<script>console.log('üí• EXCEPTION: " . addslashes($e->getMessage()) . "');</script>";
            echo $this->chargeView->showErrorMessage("Une erreur est survenue : " . $e->getMessage());
        }

        echo "<script>console.log('=== FIN handleRequest AVEC S√âLECTION SEMAINE ===');</script>";
    }

    /**
     * üÜï D√©termine la semaine s√©lectionn√©e en fonction des param√®tres URL
     *
     * @param array $availableWeeks Liste des semaines disponibles
     * @return string Identifiant de la semaine s√©lectionn√©e
     */
    private function determineSelectedWeek($availableWeeks) {
        // R√©cup√©rer le param√®tre de semaine depuis l'URL
        $requestedWeek = $_GET['selected_week'] ?? '';

        echo "<script>console.log('Semaine demand√©e via URL: " . addslashes($requestedWeek) . "');</script>";

        // V√©rifier si la semaine demand√©e existe dans les semaines disponibles
        if (!empty($requestedWeek)) {
            foreach ($availableWeeks as $week) {
                if ($week['value'] === $requestedWeek) {
                    echo "<script>console.log('‚úì Semaine demand√©e trouv√©e et valide');</script>";
                    return $requestedWeek;
                }
            }
            echo "<script>console.log('‚ö†Ô∏è Semaine demand√©e non trouv√©e, utilisation de la semaine par d√©faut');</script>";
        }

        // Par d√©faut, utiliser la premi√®re semaine disponible (semaine courante ou la plus proche)
        $defaultWeek = $availableWeeks[0]['value'];
        echo "<script>console.log('Semaine par d√©faut s√©lectionn√©e: " . addslashes($defaultWeek) . "');</script>";

        return $defaultWeek;
    }
}