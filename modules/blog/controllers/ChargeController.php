<?php
namespace modules\blog\controllers;

use modules\blog\models\DashboardModel;
use modules\blog\models\ChargeModel;
use modules\blog\models\GraphGeneratorModel;
use modules\blog\views\ChargeView;

/**
 * Classe ChargeController
 *
 * Cette classe g√®re les op√©rations li√©es √† l'analyse de charge.
 */
class ChargeController {
    private $dashboardModel;
    private $chargeModel;
    private $graphGenerator;
    private $chargeView;

    /**
     * Constructeur du ChargeController
     */
    public function __construct() {
        $this->dashboardModel = new DashboardModel();
        $this->chargeModel = new ChargeModel();
        $this->graphGenerator = new GraphGeneratorModel(); // AJOUT
        $this->chargeView = new ChargeView();
    }

    /**
     * G√®re les actions li√©es √† l'analyse de charge
     *
     * @param string $action Action √† ex√©cuter
     */
    public function handleRequest($action = '') {
        echo "<script>console.log('=== D√âBUT handleRequest ===');</script>";
        echo "<script>console.log('Action re√ßue: " . addslashes($action) . "');</script>";
        echo "<script>console.log('URL compl√®te: " . addslashes($_SERVER['REQUEST_URI'] ?? 'N/A') . "');</script>";
        echo "<script>console.log('Param√®tres GET: " . addslashes(json_encode($_GET)) . "');</script>";

        // R√©cup√©rer l'ID utilisateur de la session
        $userId = $_SESSION['user_id'] ?? 'Utilisateur';

        // R√©cup√©rer les informations de l'utilisateur
        $userInfo = $this->dashboardModel->getUserInfo($userId);

        echo "<script>console.log('üìä FLUX STANDARD - Nettoyage puis g√©n√©ration des graphiques');</script>";

        try {
            // V√©rifier si des donn√©es sont disponibles
            if (!$this->dashboardModel->hasData()) {
                echo "<script>console.log('‚ùå ERREUR: Aucune donn√©e disponible');</script>";
                echo $this->chargeView->showErrorMessage("Aucune donn√©e disponible. Veuillez d'abord convertir et importer des fichiers depuis le tableau de bord.");
                return;
            }

            echo "<script>console.log('‚úì Donn√©es disponibles, d√©but du processus...');</script>";

            // üÜï √âTAPE 1 : NETTOYER AUTOMATIQUEMENT LES IMAGES
            echo "<script>console.log('üßπ √âTAPE 1: Nettoyage automatique des images...');</script>";
            $nettoyageResult = $this->chargeModel->nettoyerGraphiquesPng();

            if ($nettoyageResult['success']) {
                echo "<script>console.log('‚úÖ Nettoyage r√©ussi: " . addslashes($nettoyageResult['message']) . "');</script>";
            } else {
                echo "<script>console.log('‚ö†Ô∏è Probl√®me nettoyage: " . addslashes($nettoyageResult['message']) . "');</script>";
            }

            // √âTAPE 2 : Analyser les donn√©es pour obtenir la charge par p√©riode
            echo "<script>console.log('üìä √âTAPE 2: Analyse des donn√©es...');</script>";
            $resultatAnalyse = $this->chargeModel->analyserChargeParPeriode();

            if (isset($resultatAnalyse['error'])) {
                echo "<script>console.log('‚ùå ERREUR analyse: " . addslashes($resultatAnalyse['error']) . "');</script>";
                echo $this->chargeView->showErrorMessage($resultatAnalyse['error']);
                return;
            }

            echo "<script>console.log('‚úì Analyse r√©ussie');</script>";

            // √âTAPE 3 : Formater les r√©sultats pour l'affichage
            echo "<script>console.log('üîß √âTAPE 3: Formatage des r√©sultats...');</script>";
            $resultatsFormatt√©s = $this->chargeModel->formaterResultats($resultatAnalyse);
            echo "<script>console.log('‚úì Formatage r√©ussi');</script>";

            // √âTAPE 4 : G√âN√âRATION DES NOUVEAUX GRAPHIQUES (apr√®s nettoyage)
            $chartPaths = [];
            if (isset($resultatsFormatt√©s['graphiquesData'])) {
                echo "<script>console.log('üé® √âTAPE 4: G√©n√©ration des nouveaux graphiques...');</script>";
                $chartPaths = $this->graphGenerator->generateAllCharts($resultatsFormatt√©s['graphiquesData']);
                echo "<script>console.log('‚úì Graphiques g√©n√©r√©s: " . count($chartPaths) . " fichiers');</script>";
            } else {
                echo "<script>console.log('‚ö†Ô∏è Pas de donn√©es graphiques disponibles');</script>";
            }

            // √âTAPE 5 : Obtenir un r√©sum√© des donn√©es pour l'affichage
            $dataSummary = $this->dashboardModel->getDataSummary();
            $fileName = "Donn√©es de la base (" . $dataSummary['total_entries'] . " entr√©es)";

            echo "<script>console.log('üñºÔ∏è √âTAPE 5: Affichage de la page avec " . count($chartPaths) . " graphiques');</script>";

            // Afficher les r√©sultats de l'analyse de charge
            echo $this->chargeView->showChargeAnalysis($userInfo, $fileName, $resultatsFormatt√©s, $chartPaths);

        } catch (\Exception $e) {
            echo "<script>console.log('üí• EXCEPTION: " . addslashes($e->getMessage()) . "');</script>";
            echo $this->chargeView->showErrorMessage("Une erreur est survenue : " . $e->getMessage());
        }

        echo "<script>console.log('=== FIN handleRequest ===');</script>";
    }

}