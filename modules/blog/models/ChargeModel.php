<?php
namespace modules\blog\models;

/**
 * Classe ChargeModel
 *
 * Cette classe g√®re l'analyse de la charge de travail √† partir des donn√©es
 * r√©cup√©r√©es depuis la base de donn√©es via ImportModel.
 *
 * VERSION REFACTORIS√âE : S√©lection libre de p√©riode (date d√©but ‚Üí date fin)
 * Suppression du syst√®me de semaines pr√©d√©finies
 */
class ChargeModel {
    /**
     * @var ImportModel $importModel Instance pour r√©cup√©rer les donn√©es
     */
    private $importModel;

    /**
     * Constructeur de ChargeModel
     */
    public function __construct() {
        // Utiliser le Singleton pour ImportModel - M√äME instance que DashboardModel !
        $this->importModel = ImportModel::getInstance();
    }

    /**
     * Analyser les donn√©es de la base de donn√©es pour obtenir la charge par p√©riode
     *
     * @return array Donn√©es de charge analys√©es
     */
    public function analyserChargeParPeriode() {
        // R√©cup√©rer les donn√©es depuis ImportModel (m√™me instance que Dashboard)
        $donneesDb = $this->importModel->getAllData();

        if (empty($donneesDb)) {
            return [
                'error' => "Aucune donn√©e disponible dans la base de donn√©es."
            ];
        }

        // Filtrer pour ne garder que les jours pr√©sents et futurs
        $donneesFiltrees = $this->filterFutureAndTodayData($donneesDb);

        if (empty($donneesFiltrees)) {
            return [
                'error' => "Aucune donn√©e disponible pour les jours pr√©sents et futurs."
            ];
        }

        // Convertir les donn√©es filtr√©es en format utilisable pour l'analyse
        $chargeParJour = $this->convertDbDataToChargeData($donneesFiltrees);

        // Calculer la charge par processus et par semaine (donn√©es filtr√©es)
        $chargeParSemaine = $this->calculateWeeklyChargeByProcess($donneesFiltrees);

        // Trouver la date de d√©but et de fin globale du projet
        $dates = array_keys($chargeParJour);
        sort($dates);
        $dateDebut = new \DateTime(reset($dates));
        $dateFin = new \DateTime(end($dates));

        return [
            'chargeParJour' => array_values($chargeParJour),
            'chargeParSemaine' => $chargeParSemaine,
            'dateDebut' => $dateDebut,
            'dateFin' => $dateFin
        ];
    }

    /**
     * üÜï NOUVELLE M√âTHODE : R√©cup√®re les donn√©es quotidiennes pour une p√©riode libre
     *
     * @param string $dateDebut Date de d√©but de la p√©riode (format Y-m-d)
     * @param string $dateFin Date de fin de la p√©riode (format Y-m-d)
     * @return array Donn√©es format√©es pour cette p√©riode
     */
    public function getDailyDataForPeriod($dateDebut, $dateFin) {
        echo "<script>console.log('[ChargeModel] === R√âCUP√âRATION DONN√âES POUR P√âRIODE LIBRE ===');</script>";
        echo "<script>console.log('[ChargeModel] P√©riode demand√©e: " . addslashes($dateDebut) . " ‚Üí " . addslashes($dateFin) . "');</script>";

        try {
            // Validation et cr√©ation des objets DateTime
            $debutPeriode = new \DateTime($dateDebut);
            $finPeriode = new \DateTime($dateFin);

            // Validation : d√©but doit √™tre ant√©rieur √† la fin
            if ($debutPeriode > $finPeriode) {
                echo "<script>console.log('[ChargeModel] Erreur: Date d√©but post√©rieure √† date fin');</script>";
                return ['error' => 'La date de d√©but doit √™tre ant√©rieure √† la date de fin.'];
            }

            // Calcul du nombre de jours dans la p√©riode
            $nombreJours = $this->calculateWorkingDaysBetween($debutPeriode, $finPeriode);
            echo "<script>console.log('[ChargeModel] Jours ouvr√©s dans la p√©riode: " . count($nombreJours) . "');</script>";

            if (empty($nombreJours)) {
                return ['error' => 'Aucun jour ouvr√© trouv√© dans cette p√©riode.'];
            }

        } catch (\Exception $e) {
            echo "<script>console.log('[ChargeModel] Erreur parsing dates: " . addslashes($e->getMessage()) . "');</script>";
            return ['error' => 'Format de date invalide: ' . $e->getMessage()];
        }

        // R√©cup√©rer toutes les donn√©es depuis ImportModel
        $donneesDb = $this->importModel->getAllData();

        if (empty($donneesDb)) {
            return ['error' => 'Aucune donn√©e disponible dans la base de donn√©es.'];
        }

        // Filtrer les donn√©es pour cette p√©riode uniquement (en excluant les weekends)
        $donneesPeriode = [];
        foreach ($donneesDb as $donnee) {
            try {
                $dateDonnee = new \DateTime($donnee['Date']);

                // V√©rifier si la date est dans la p√©riode ET que c'est un jour ouvr√©
                if ($dateDonnee >= $debutPeriode && $dateDonnee <= $finPeriode && $this->isWorkingDay($dateDonnee)) {
                    $donneesPeriode[] = $donnee;
                }
            } catch (\Exception $e) {
                echo "<script>console.log('[ChargeModel] Erreur parsing date donn√©e: " . addslashes($e->getMessage()) . "');</script>";
                continue;
            }
        }

        echo "<script>console.log('[ChargeModel] Donn√©es trouv√©es pour cette p√©riode: " . count($donneesPeriode) . "');</script>";

        // Convertir en format graphique par jour
        $graphiquesData = $this->preparePeriodGraphicsData($donneesPeriode, $debutPeriode, $finPeriode);

        return [
            'graphiquesData' => $graphiquesData,
            'debutPeriode' => $debutPeriode,
            'finPeriode' => $finPeriode,
            'donneesCount' => count($donneesPeriode),
            'nombreJoursOuvres' => count($nombreJours)
        ];
    }

    /**
     * üÜï NOUVELLE M√âTHODE : Pr√©pare les donn√©es graphiques pour une p√©riode libre
     *
     * @param array $donneesPeriode Donn√©es de la p√©riode
     * @param \DateTime $debutPeriode Date de d√©but
     * @param \DateTime $finPeriode Date de fin
     * @return array Donn√©es format√©es pour JPGraph
     */
    private function preparePeriodGraphicsData($donneesPeriode, $debutPeriode, $finPeriode) {
        echo "<script>console.log('[ChargeModel] === PR√âPARATION DONN√âES GRAPHIQUES P√âRIODE LIBRE ===');</script>";

        // Mapping des processus vers les cat√©gories
        $mappingProcessus = [
            'production' => ['CHAUDNQ', 'SOUDNQ', 'CT'],
            'etude' => ['CALC', 'PROJ'],
            'methode' => ['METH'],
            'qualite' => ['QUAL', 'QUALS']
        ];

        // Cr√©er la liste de TOUS les jours ouvr√©s de la p√©riode (m√™me sans donn√©es)
        $joursOuvres = $this->calculateWorkingDaysBetween($debutPeriode, $finPeriode);
        $nombreJours = count($joursOuvres);

        echo "<script>console.log('[ChargeModel] Jours ouvr√©s √† traiter: " . $nombreJours . "');</script>";

        // Cr√©er les labels adaptatifs selon la dur√©e de la p√©riode
        $joursLabels = $this->generateAdaptiveLabels($joursOuvres);

        echo "<script>console.log('[ChargeModel] Labels g√©n√©r√©s: " . count($joursLabels) . "');</script>";

        // Initialiser les donn√©es par cat√©gorie et par processus (tous les jours ouvr√©s)
        $donnees = [
            'production' => [
                'CHAUDNQ' => array_fill(0, $nombreJours, 0),
                'SOUDNQ' => array_fill(0, $nombreJours, 0),
                'CT' => array_fill(0, $nombreJours, 0)
            ],
            'etude' => [
                'CALC' => array_fill(0, $nombreJours, 0),
                'PROJ' => array_fill(0, $nombreJours, 0)
            ],
            'methode' => [
                'METH' => array_fill(0, $nombreJours, 0)
            ],
            'qualite' => [
                'QUAL' => array_fill(0, $nombreJours, 0),
                'QUALS' => array_fill(0, $nombreJours, 0)
            ]
        ];

        // Cr√©er un mapping date ‚Üí index pour un acc√®s rapide
        $dateToIndexMap = [];
        foreach ($joursOuvres as $index => $jourObj) {
            $dateToIndexMap[$jourObj->format('Y-m-d')] = $index;
        }

        // Remplir les donn√©es jour par jour
        foreach ($donneesPeriode as $donnee) {
            $dateData = $donnee['Date'];
            $processus = $donnee['Processus'];
            $charge = floatval($donnee['Charge']);

            // Trouver l'index du jour
            if (!isset($dateToIndexMap[$dateData])) {
                echo "<script>console.log('[ChargeModel] Date non trouv√©e dans la p√©riode ou weekend: " . addslashes($dateData) . "');</script>";
                continue;
            }

            $indexJour = $dateToIndexMap[$dateData];

            // Trouver la cat√©gorie du processus
            $categorieProcessus = null;
            foreach ($mappingProcessus as $categorie => $processusListe) {
                if (in_array($processus, $processusListe)) {
                    $categorieProcessus = $categorie;
                    break;
                }
            }

            if ($categorieProcessus && isset($donnees[$categorieProcessus][$processus])) {
                $donnees[$categorieProcessus][$processus][$indexJour] += $charge;
                echo "<script>console.log('[ChargeModel] Ajout: " . addslashes($processus) . " (" . addslashes($categorieProcessus) . ") jour " . $indexJour . " = +" . $charge . "');</script>";
            } else {
                echo "<script>console.log('[ChargeModel] Processus ignor√©: " . addslashes($processus) . " (cat√©gorie non trouv√©e)');</script>";
            }
        }

        // Ajouter les labels et m√©tadonn√©es aux donn√©es
        $graphiquesData = array_merge($donnees, [
            'jours_labels' => $joursLabels,
            'periode_info' => [
                'debut' => $debutPeriode->format('d/m/Y'),
                'fin' => $finPeriode->format('d/m/Y'),
                'nombre_jours' => $nombreJours,
                'largeur_graphique' => max(900, $nombreJours * 60) // Largeur dynamique
            ]
        ]);

        // Log des totaux par cat√©gorie
        foreach ($mappingProcessus as $categorie => $processusListe) {
            $totalCategorie = 0;
            foreach ($processusListe as $proc) {
                if (isset($donnees[$categorie][$proc])) {
                    $totalProc = array_sum($donnees[$categorie][$proc]);
                    $totalCategorie += $totalProc;
                    if ($totalProc > 0) {
                        echo "<script>console.log('[ChargeModel] Total " . addslashes($proc) . ": " . $totalProc . "');</script>";
                    }
                }
            }
            echo "<script>console.log('[ChargeModel] Total cat√©gorie " . addslashes($categorie) . ": " . $totalCategorie . "');</script>";
        }

        echo "<script>console.log('[ChargeModel] Donn√©es graphiques p√©riode libre pr√©par√©es');</script>";

        return $graphiquesData;
    }

    /**
     * üÜï Calcule tous les jours ouvr√©s entre deux dates (exclut weekends)
     *
     * @param \DateTime $dateDebut Date de d√©but
     * @param \DateTime $dateFin Date de fin
     * @return array Liste des objets DateTime des jours ouvr√©s
     */
    private function calculateWorkingDaysBetween($dateDebut, $dateFin) {
        $joursOuvres = [];
        $current = clone $dateDebut;

        while ($current <= $dateFin) {
            // Inclure seulement les jours ouvr√©s (Lundi=1 √† Vendredi=5)
            if ($this->isWorkingDay($current)) {
                $joursOuvres[] = clone $current;
            }
            $current->add(new \DateInterval('P1D'));
        }

        return $joursOuvres;
    }

    /**
     * üÜï V√©rifie si un jour est un jour ouvr√© (exclut samedi et dimanche)
     *
     * @param \DateTime $date Date √† v√©rifier
     * @return bool True si jour ouvr√©, false si weekend
     */
    private function isWorkingDay($date) {
        $dayOfWeek = (int)$date->format('N'); // 1=Lundi, 7=Dimanche
        return $dayOfWeek >= 1 && $dayOfWeek <= 5; // Lundi √† Vendredi
    }

    /**
     * üÜï G√©n√®re des labels adaptatifs selon la dur√©e de la p√©riode
     *
     * @param array $joursOuvres Liste des jours ouvr√©s
     * @return array Labels format√©s pour l'affichage
     */
    private function generateAdaptiveLabels($joursOuvres) {
        $nombreJours = count($joursOuvres);
        $labels = [];

        if ($nombreJours <= 14) {
            // <= 14 jours : afficher tous les jours (format court)
            foreach ($joursOuvres as $jour) {
                $labels[] = $jour->format('d/m'); // Ex: "03/12"
            }
        } elseif ($nombreJours <= 30) {
            // 15-30 jours : afficher 1 jour sur 2
            foreach ($joursOuvres as $index => $jour) {
                if ($index % 2 === 0) {
                    $labels[] = $jour->format('d/m');
                } else {
                    $labels[] = ''; // Label vide pour espacement
                }
            }
        } else {
            // > 30 jours : afficher 1 jour sur 5 (environ toutes les semaines)
            foreach ($joursOuvres as $index => $jour) {
                if ($index % 5 === 0) {
                    $labels[] = $jour->format('d/m');
                } else {
                    $labels[] = ''; // Label vide pour espacement
                }
            }
        }

        echo "<script>console.log('[ChargeModel] Strat√©gie labels pour " . $nombreJours . " jours: " . ($nombreJours <= 14 ? 'tous' : ($nombreJours <= 30 ? '1/2' : '1/5')) . "');</script>";

        return $labels;
    }

    /**
     * üÜï Obtient la plage de dates disponibles dans les donn√©es
     * Utile pour d√©finir min/max des inputs date de l'interface
     *
     * @return array Informations sur la plage de dates disponibles
     */
    public function getAvailableDateRange() {
        echo "<script>console.log('[ChargeModel] === R√âCUP√âRATION PLAGE DATES DISPONIBLES ===');</script>";

        // R√©cup√©rer toutes les donn√©es depuis ImportModel
        $donneesDb = $this->importModel->getAllData();

        if (empty($donneesDb)) {
            echo "<script>console.log('[ChargeModel] Aucune donn√©e disponible');</script>";
            return [
                'has_data' => false,
                'message' => 'Aucune donn√©e disponible'
            ];
        }

        // Extraire toutes les dates
        $dates = array_column($donneesDb, 'Date');
        sort($dates);

        $dateMin = new \DateTime(reset($dates));
        $dateMax = new \DateTime(end($dates));

        echo "<script>console.log('[ChargeModel] Plage disponible: " . addslashes($dateMin->format('Y-m-d')) . " ‚Üí " . addslashes($dateMax->format('Y-m-d')) . "');</script>";

        return [
            'has_data' => true,
            'date_min' => $dateMin->format('Y-m-d'),
            'date_max' => $dateMax->format('Y-m-d'),
            'date_min_formatted' => $dateMin->format('d/m/Y'),
            'date_max_formatted' => $dateMax->format('d/m/Y'),
            'total_entries' => count($donneesDb)
        ];
    }

    // ========================================
    // M√âTHODES CONSERV√âES POUR COMPATIBILIT√â
    // ========================================

    /**
     * Filtre les donn√©es pour ne garder que les jours pr√©sents et futurs
     *
     * @param array $donneesDb Donn√©es de la base de donn√©es
     * @return array Donn√©es filtr√©es
     */
    private function filterFutureAndTodayData($donneesDb) {
        // Obtenir la date d'aujourd'hui √† minuit pour la comparaison
        $aujourdhui = new \DateTime();
        $aujourdhui->setTime(0, 0, 0); // Minuit aujourd'hui

        $donneesFiltrees = [];

        foreach ($donneesDb as $donnee) {
            $dateDonnee = new \DateTime($donnee['Date']);
            $dateDonnee->setTime(0, 0, 0); // Minuit pour cette date

            // Garder seulement si la date est aujourd'hui ou dans le futur
            if ($dateDonnee >= $aujourdhui) {
                $donneesFiltrees[] = $donnee;
            }
        }

        return $donneesFiltrees;
    }

    /**
     * Calcule la charge par processus et par semaine
     *
     * @param array $donneesDb Donn√©es de la base de donn√©es
     * @return array Charge par semaine et par processus
     */
    private function calculateWeeklyChargeByProcess($donneesDb) {
        $chargeParSemaine = [];

        foreach ($donneesDb as $donnee) {
            $date = new \DateTime($donnee['Date']);
            $processus = $donnee['Processus'];
            $charge = floatval($donnee['Charge']);

            // Calculer le d√©but de la semaine (lundi)
            $debutSemaine = clone $date;
            $jourSemaine = $date->format('N'); // 1 = lundi, 7 = dimanche
            $debutSemaine->sub(new \DateInterval('P' . ($jourSemaine - 1) . 'D'));

            // Calculer la fin de la semaine (dimanche)
            $finSemaine = clone $debutSemaine;
            $finSemaine->add(new \DateInterval('P6D'));

            // Cr√©er la cl√© de semaine
            $cleSemaine = $debutSemaine->format('Y-m-d') . '_' . $finSemaine->format('Y-m-d');

            // Initialiser la semaine si n√©cessaire
            if (!isset($chargeParSemaine[$cleSemaine])) {
                $chargeParSemaine[$cleSemaine] = [
                    'debut' => $debutSemaine,
                    'fin' => $finSemaine,
                    'processus' => [],
                    'total' => 0
                ];
            }

            // Initialiser le processus si n√©cessaire
            if (!isset($chargeParSemaine[$cleSemaine]['processus'][$processus])) {
                $chargeParSemaine[$cleSemaine]['processus'][$processus] = 0;
            }

            // Ajouter la charge
            $chargeParSemaine[$cleSemaine]['processus'][$processus] += $charge;
            $chargeParSemaine[$cleSemaine]['total'] += $charge;
        }

        // Trier par date de d√©but de semaine
        ksort($chargeParSemaine);

        return $chargeParSemaine;
    }

    /**
     * Convertit les donn√©es de la base de donn√©es en format d'analyse de charge
     *
     * @param array $donneesDb Donn√©es de la base de donn√©es
     * @return array Donn√©es format√©es pour l'analyse
     */
    private function convertDbDataToChargeData($donneesDb) {
        $chargeParJour = [];

        // Grouper les donn√©es par date
        foreach ($donneesDb as $donnee) {
            $date = $donnee['Date'];
            $processus = $donnee['Processus'];
            $tache = $donnee['Tache'];
            $charge = floatval($donnee['Charge']);

            // Initialiser le jour s'il n'existe pas
            if (!isset($chargeParJour[$date])) {
                $dateObj = new \DateTime($date);
                $jourSemaine = $dateObj->format('N'); // 1 (lundi) √† 7 (dimanche)
                $estWeekend = ($jourSemaine == 6 || $jourSemaine == 7);

                $chargeParJour[$date] = [
                    'date' => $dateObj,
                    'charge' => 0,
                    'taches' => [],
                    'processus' => [],
                    'estWeekend' => $estWeekend
                ];
            }

            // Ajouter la charge et les informations
            $chargeParJour[$date]['charge'] += $charge;

            // Ajouter la t√¢che si pas d√©j√† pr√©sente
            if (!in_array($tache, $chargeParJour[$date]['taches'])) {
                $chargeParJour[$date]['taches'][] = $tache;
            }

            // Ajouter le processus si pas d√©j√† pr√©sent
            if (!in_array($processus, $chargeParJour[$date]['processus'])) {
                $chargeParJour[$date]['processus'][] = $processus;
            }
        }

        return $chargeParJour;
    }

    /**
     * Formater les r√©sultats pour l'affichage
     *
     * @param array $resultatAnalyse R√©sultat de l'analyse de charge
     * @return array Donn√©es format√©es pour l'affichage
     */
    public function formaterResultats($resultatAnalyse) {
        $donneesMensuellesFormat = [];
        $moisActuel = '';
        $donneesMois = [];

        // D√©finir les noms des jours de la semaine en fran√ßais
        $joursEnFrancais = [
            1 => 'Lundi',
            2 => 'Mardi',
            3 => 'Mercredi',
            4 => 'Jeudi',
            5 => 'Vendredi',
            6 => 'Samedi',
            7 => 'Dimanche'
        ];

        // Traiter tous les jours analys√©s
        foreach ($resultatAnalyse['chargeParJour'] as $jour) {
            $date = $jour['date'];
            $mois = $date->format('F Y'); // Nom du mois et ann√©e

            if ($mois !== $moisActuel) {
                if (!empty($donneesMois)) {
                    $donneesMensuellesFormat[$moisActuel] = $donneesMois;
                }
                $moisActuel = $mois;
                $donneesMois = [];
            }

            // Pr√©parer les processus pour l'affichage
            $processusTexte = implode(', ', $jour['processus']);

            // D√©terminer l'affichage en fonction du type de jour
            if ($jour['estWeekend']) {
                // Week-end - pas de charge
                $donneesMois[] = [
                    'date' => $date->format('d/m/Y'),
                    'charge' => '0',
                    'taches' => '',
                    'processus' => '',
                    'jour_semaine' => $joursEnFrancais[$date->format('N')],
                    'estWeekend' => true
                ];
            } else {
                // Jour de semaine - afficher la charge et les t√¢ches
                $donneesMois[] = [
                    'date' => $date->format('d/m/Y'),
                    'charge' => number_format($jour['charge'], 2),
                    'taches' => implode(', ', $jour['taches']),
                    'processus' => $processusTexte,
                    'jour_semaine' => $joursEnFrancais[$date->format('N')],
                    'estWeekend' => false
                ];
            }
        }

        if (!empty($donneesMois)) {
            $donneesMensuellesFormat[$moisActuel] = $donneesMois;
        }

        // Formater les donn√©es de charge par semaine
        $chargeParSemaineFormatee = [];
        if (isset($resultatAnalyse['chargeParSemaine'])) {
            foreach ($resultatAnalyse['chargeParSemaine'] as $semaine) {
                $chargeParSemaineFormatee[] = [
                    'debut' => $semaine['debut']->format('d/m/Y'),
                    'fin' => $semaine['fin']->format('d/m/Y'),
                    'processus' => $semaine['processus'],
                    'total' => number_format($semaine['total'], 2)
                ];
            }
        }

        return [
            'donneesMensuelles' => $donneesMensuellesFormat,
            'chargeParSemaine' => $chargeParSemaineFormatee,
            'dateDebut' => $resultatAnalyse['dateDebut']->format('d/m/Y'),
            'dateFin' => $resultatAnalyse['dateFin']->format('d/m/Y')
        ];
    }
}